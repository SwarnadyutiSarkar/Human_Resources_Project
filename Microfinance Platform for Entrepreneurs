import uuid
from datetime import datetime, timedelta

class Borrower:
    def __init__(self, name, business_name, loan_amount):
        self.borrower_id = str(uuid.uuid4())
        self.name = name
        self.business_name = business_name
        self.loan_amount = loan_amount
        self.loan_status = 'Pending'  # Pending, Approved, Repaid
        self.loan_repayment_schedule = []
        self.total_repaid = 0
        self.loan_issue_date = None
        self.repayment_due_date = None

    def approve_loan(self):
        self.loan_status = 'Approved'
        self.loan_issue_date = datetime.now()
        self.repayment_due_date = self.loan_issue_date + timedelta(days=30)  # 30 days repayment period
        self.loan_repayment_schedule = [self.loan_amount / 4] * 4  # 4 installments
        print(f"Loan of {self.loan_amount} approved for {self.business_name}.")

    def make_repayment(self, amount):
        if self.loan_status != 'Approved':
            print("Loan not approved yet.")
            return
        self.total_repaid += amount
        if self.total_repaid >= self.loan_amount:
            self.loan_status = 'Repaid'
            print(f"Loan fully repaid by {self.business_name}.")
        else:
            print(f"Repaid {amount}. Remaining balance: {self.loan_amount - self.total_repaid}")

    def display_borrower_info(self):
        print(f"Borrower ID: {self.borrower_id}")
        print(f"Name: {self.name}")
        print(f"Business Name: {self.business_name}")
        print(f"Loan Amount: {self.loan_amount}")
        print(f"Loan Status: {self.loan_status}")
        print(f"Repayment Due Date: {self.repayment_due_date}")
        print(f"Total Repaid: {self.total_repaid}")
        print(f"Remaining Balance: {self.loan_amount - self.total_repaid}")


class MicrofinancePlatform:
    def __init__(self):
        self.borrowers = []
        self.microloan_fund = 1000000  # Total fund available for loans

    def create_borrower(self, name, business_name, loan_amount):
        if loan_amount <= 0:
            print("Invalid loan amount.")
            return None
        if loan_amount > self.microloan_fund:
            print("Insufficient funds in the microloan fund.")
            return None
        borrower = Borrower(name, business_name, loan_amount)
        self.borrowers.append(borrower)
        self.microloan_fund -= loan_amount
        print(f"Borrower {business_name} created with loan amount {loan_amount}.")
        return borrower

    def approve_loan(self, borrower):
        if borrower in self.borrowers:
            borrower.approve_loan()
            print(f"Loan for {borrower.business_name} has been approved.")
        else:
            print("Borrower not found.")

    def track_loans(self):
        print("\n--- Loan Summary ---")
        for borrower in self.borrowers:
            borrower.display_borrower_info()

    def make_loan_repayment(self, borrower_id, repayment_amount):
        borrower = self.get_borrower_by_id(borrower_id)
        if borrower:
            borrower.make_repayment(repayment_amount)
        else:
            print(f"No borrower found with ID {borrower_id}.")

    def get_borrower_by_id(self, borrower_id):
        for borrower in self.borrowers:
            if borrower.borrower_id == borrower_id:
                return borrower
        return None


# Example Usage

# Create the microfinance platform
platform = MicrofinancePlatform()

# Create some borrowers
borrower1 = platform.create_borrower("Alice", "Tech Solutions", 1000)
borrower2 = platform.create_borrower("Bob", "Green Farms", 2000)

# Approve loans
platform.approve_loan(borrower1)
platform.approve_loan(borrower2)

# Track loan status
platform.track_loans()

# Simulate loan repayments
platform.make_loan_repayment(borrower1.borrower_id, 250)
platform.make_loan_repayment(borrower2.borrower_id, 500)

# Track loan status again after repayments
platform.track_loans()

# Final repayment and loan closure
platform.make_loan_repayment(borrower1.borrower_id, 750)
platform.make_loan_repayment(borrower2.borrower_id, 1500)

# Track loan status after full repayment
platform.track_loans()
