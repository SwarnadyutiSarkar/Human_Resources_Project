import hashlib
import json
import time

class Transaction:
    def __init__(self, sender, recipient, amount):
        self.sender = sender
        self.recipient = recipient
        self.amount = amount
        self.timestamp = time.time()

    def to_dict(self):
        return {
            "sender": self.sender,
            "recipient": self.recipient,
            "amount": self.amount,
            "timestamp": self.timestamp
        }

class Block:
    def __init__(self, index, timestamp, transactions, previous_hash=''):
        self.index = index
        self.timestamp = timestamp
        self.transactions = transactions
        self.previous_hash = previous_hash
        self.hash = self.calculate_hash()

    def calculate_hash(self):
        block_string = json.dumps(self.to_dict(), sort_keys=True).encode()
        return hashlib.sha256(block_string).hexdigest()

    def to_dict(self):
        return {
            "index": self.index,
            "timestamp": self.timestamp,
            "transactions": [tx.to_dict() for tx in self.transactions],
            "previous_hash": self.previous_hash,
            "hash": self.hash
        }

class Blockchain:
    def __init__(self, aid_currency_name="AidCoin"):
        self.chain = []
        self.current_transactions = []
        self.aid_currency_name = aid_currency_name
        self.create_genesis_block()

    def create_genesis_block(self):
        # Creating the first block (genesis block) with no previous hash
        genesis_block = Block(index=0, timestamp=time.time(), transactions=[], previous_hash='0')
        self.chain.append(genesis_block)

    def add_transaction(self, sender, recipient, amount):
        transaction = Transaction(sender, recipient, amount)
        self.current_transactions.append(transaction)

    def add_block(self):
        last_block = self.chain[-1]
        new_block = Block(
            index=last_block.index + 1,
            timestamp=time.time(),
            transactions=self.current_transactions,
            previous_hash=last_block.hash
        )
        self.chain.append(new_block)
        self.current_transactions = []  # Reset the current transactions

    def verify_chain(self):
        # Verify the integrity of the blockchain
        for i in range(1, len(self.chain)):
            current_block = self.chain[i]
            previous_block = self.chain[i - 1]
            
            if current_block.hash != current_block.calculate_hash():
                print(f"Hash mismatch at block {current_block.index}")
                return False
            
            if current_block.previous_hash != previous_block.hash:
                print(f"Previous hash mismatch at block {current_block.index}")
                return False
        return True

    def get_balance(self, address):
        balance = 0
        for block in self.chain:
            for transaction in block.transactions:
                if transaction.sender == address:
                    balance -= transaction.amount
                if transaction.recipient == address:
                    balance += transaction.amount
        return balance

    def get_chain(self):
        return [block.to_dict() for block in self.chain]

# Initialize the blockchain
blockchain = Blockchain()

# Simulate Aid Distribution Process
blockchain.add_transaction(sender="Government", recipient="NGO", amount=1000)  # Government issues tokens to an NGO
blockchain.add_transaction(sender="Government", recipient="Beneficiary1", amount=500)  # Government issues aid to a beneficiary
blockchain.add_transaction(sender="Government", recipient="Beneficiary2", amount=300)  # Another aid distribution

# Add the transactions to the blockchain
blockchain.add_block()

# Simulate a few more aid distributions
blockchain.add_transaction(sender="NGO", recipient="Beneficiary3", amount=200)
blockchain.add_transaction(sender="NGO", recipient="Beneficiary4", amount=150)

blockchain.add_block()

# Verify the chain's integrity
is_valid = blockchain.verify_chain()
print(f"Blockchain valid: {is_valid}")

# Print the blockchain information (transactions and blocks)
print("\nBlockchain:")
for block in blockchain.get_chain():
    print(json.dumps(block, indent=4))

# Checking the balance of an individual (beneficiary)
beneficiary_address = "Beneficiary1"
balance = blockchain.get_balance(beneficiary_address)
print(f"\n{beneficiary_address} balance: {balance} {blockchain.aid_currency_name}")
