import hashlib
import json
import time

class Block:
    def __init__(self, index, timestamp, transactions, previous_hash):
        self.index = index
        self.timestamp = timestamp
        self.transactions = transactions
        self.previous_hash = previous_hash
        self.hash = self.calculate_hash()

    def calculate_hash(self):
        block_string = json.dumps(self.__dict__, sort_keys=True).encode()
        return hashlib.sha256(block_string).hexdigest()

class Blockchain:
    def __init__(self):
        self.chain = []
        self.current_transactions = []
        self.create_genesis_block()

    def create_genesis_block(self):
        """Create the first block in the blockchain, known as the genesis block."""
        genesis_block = Block(0, time.time(), [], "0")
        self.chain.append(genesis_block)

    def add_transaction(self, sender, recipient, amount):
        """Add a new transaction to the list of transactions."""
        transaction = {
            'sender': sender,
            'recipient': recipient,
            'amount': amount,
            'timestamp': time.time()
        }
        self.current_transactions.append(transaction)
        return self.last_block.index + 1

    def add_block(self, previous_hash):
        """Create a new block and add it to the blockchain."""
        block = Block(len(self.chain), time.time(), self.current_transactions, previous_hash)
        self.chain.append(block)
        self.current_transactions = []

    def get_last_block(self):
        """Get the last block in the chain."""
        return self.chain[-1]

    def is_chain_valid(self):
        """Check if the blockchain is valid."""
        for i in range(1, len(self.chain)):
            current_block = self.chain[i]
            previous_block = self.chain[i - 1]

            if current_block.hash != current_block.calculate_hash():
                return False
            if current_block.previous_hash != previous_block.hash:
                return False
        return True

    def display_chain(self):
        """Display the entire blockchain."""
        for block in self.chain:
            print(f"Block #{block.index} | Timestamp: {block.timestamp}")
            print(f"Transactions: {json.dumps(block.transactions, indent=4)}")
            print(f"Hash: {block.hash}\n")

def main():
    # Create the blockchain instance
    blockchain = Blockchain()

    # Example of adding transactions
    blockchain.add_transaction(sender="Donor_1", recipient="NGO_A", amount=100)
    blockchain.add_transaction(sender="Donor_2", recipient="NGO_B", amount=50)

    # Add the block with transactions
    blockchain.add_block(previous_hash=blockchain.get_last_block().hash)

    # Add another set of transactions
    blockchain.add_transaction(sender="Donor_3", recipient="NGO_C", amount=200)

    # Add another block
    blockchain.add_block(previous_hash=blockchain.get_last_block().hash)

    # Display the blockchain
    blockchain.display_chain()

    # Verify if the blockchain is valid
    if blockchain.is_chain_valid():
        print("The blockchain is valid!")
    else:
        print("The blockchain is not valid!")

if __name__ == "__main__":
    main()
