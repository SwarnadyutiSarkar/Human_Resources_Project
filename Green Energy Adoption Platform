import hashlib
import json
import time

class Block:
    def __init__(self, index, timestamp, data, previous_hash):
        self.index = index
        self.timestamp = timestamp
        self.data = data
        self.previous_hash = previous_hash
        self.hash = self.calculate_hash()

    def calculate_hash(self):
        block_string = json.dumps(self.__dict__, sort_keys=True).encode()
        return hashlib.sha256(block_string).hexdigest()

class Blockchain:
    def __init__(self):
        self.chain = []
        self.current_data = []
        self.create_genesis_block()

    def create_genesis_block(self):
        """Create the first block in the blockchain."""
        genesis_block = Block(0, time.time(), "Genesis Block", "0")
        self.chain.append(genesis_block)

    def add_data(self, project_id, project_name, energy_generated, energy_credits):
        """Add renewable energy project data and energy transactions."""
        data = {
            'project_id': project_id,
            'project_name': project_name,
            'energy_generated': energy_generated,
            'energy_credits': energy_credits,
            'timestamp': time.time()
        }
        self.current_data.append(data)
        return self.last_block.index + 1

    def add_block(self, previous_hash):
        """Create a new block and add it to the blockchain."""
        block = Block(len(self.chain), time.time(), self.current_data, previous_hash)
        self.chain.append(block)
        self.current_data = []

    def get_last_block(self):
        """Get the last block in the chain."""
        return self.chain[-1]

    def is_chain_valid(self):
        """Check if the blockchain is valid by verifying hashes."""
        for i in range(1, len(self.chain)):
            current_block = self.chain[i]
            previous_block = self.chain[i - 1]

            if current_block.hash != current_block.calculate_hash():
                return False
            if current_block.previous_hash != previous_block.hash:
                return False
        return True

    def display_chain(self):
        """Display the entire blockchain."""
        for block in self.chain:
            print(f"Block #{block.index} | Timestamp: {block.timestamp}")
            print(f"Data: {json.dumps(block.data, indent=4)}")
            print(f"Hash: {block.hash}\n")

class GreenEnergyPlatform:
    def __init__(self):
        self.blockchain = Blockchain()

    def register_project(self, project_id, project_name, energy_generated, energy_credits):
        """Register a renewable energy project and its energy credits."""
        self.blockchain.add_data(project_id, project_name, energy_generated, energy_credits)
        self.blockchain.add_block(self.blockchain.get_last_block().hash)
        print(f"Project {project_name} registered successfully.")

    def trade_credits(self, sender, recipient, energy_credits):
        """Simulate the transfer of energy credits between participants."""
        transaction = {
            'sender': sender,
            'recipient': recipient,
            'energy_credits': energy_credits,
            'timestamp': time.time()
        }
        print(f"Energy credits transaction: {json.dumps(transaction, indent=4)}")

    def display_projects(self):
        """Display all renewable energy projects."""
        self.blockchain.display_chain()

    def verify_integrity(self):
        """Check if the blockchain is valid and all transactions are authentic."""
        if self.blockchain.is_chain_valid():
            print("The blockchain is valid.")
        else:
            print("The blockchain has been tampered with!")

def main():
    # Initialize the GreenEnergyPlatform
    platform = GreenEnergyPlatform()

    # Registering Renewable Energy Projects
    platform.register_project('P001', 'SolarFarm A', 5000, 500)
    platform.register_project('P002', 'WindFarm B', 10000, 1000)

    # Display all projects
    print("All Renewable Energy Projects:")
    platform.display_projects()

    # Trading Energy Credits (Example)
    platform.trade_credits(sender="SolarFarm A", recipient="GreenCorp", energy_credits=100)

    # Verify blockchain integrity
    platform.verify_integrity()

if __name__ == "__main__":
    main()
