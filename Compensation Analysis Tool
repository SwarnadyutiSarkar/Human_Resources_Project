# Import required libraries
import pandas as pd
from flask import Flask, render_template, request, redirect, url_for, flash
from flask_sqlalchemy import SQLAlchemy
from flask_login import LoginManager, UserMixin, login_user, login_required, logout_user, current_user
from werkzeug.security import generate_password_hash, check_password_hash
import matplotlib.pyplot as plt
import io
import base64

# Initialize Flask app and database
app = Flask(__name__)
app.config['SECRET_KEY'] = 'your_secret_key'
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///compensation.db'
db = SQLAlchemy(app)

# Initialize login manager
login_manager = LoginManager()
login_manager.init_app(app)

# Models for User and Compensation
class User(UserMixin, db.Model):
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(100), unique=True, nullable=False)
    email = db.Column(db.String(100), unique=True, nullable=False)
    password = db.Column(db.String(100), nullable=False)

class Compensation(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    employee_name = db.Column(db.String(100), nullable=False)
    job_title = db.Column(db.String(100), nullable=False)
    department = db.Column(db.String(100), nullable=False)
    salary = db.Column(db.Float, nullable=False)
    location = db.Column(db.String(100), nullable=False)

# User loader for login_manager
@login_manager.user_loader
def load_user(user_id):
    return User.query.get(int(user_id))

# Routes for the platform

# Home route
@app.route('/')
@login_required
def home():
    return render_template('index.html')

# Register route
@app.route('/register', methods=['GET', 'POST'])
def register():
    if request.method == 'POST':
        username = request.form['username']
        email = request.form['email']
        password = request.form['password']
        hashed_password = generate_password_hash(password, method='sha256')
        new_user = User(username=username, email=email, password=hashed_password)
        db.session.add(new_user)
        db.session.commit()
        flash('Account created successfully!', 'success')
        return redirect(url_for('login'))
    return render_template('register.html')

# Login route
@app.route('/login', methods=['GET', 'POST'])
def login():
    if request.method == 'POST':
        email = request.form['email']
        password = request.form['password']
        user = User.query.filter_by(email=email).first()
        if user and check_password_hash(user.password, password):
            login_user(user)
            return redirect(url_for('home'))
        flash('Login Unsuccessful. Please check email and password', 'danger')
    return render_template('login.html')

# Logout route
@app.route('/logout')
@login_required
def logout():
    logout_user()
    return redirect(url_for('login'))

# Compensation Data Upload Route
@app.route('/upload', methods=['GET', 'POST'])
@login_required
def upload_compensation():
    if request.method == 'POST':
        file = request.files['file']
        if file and file.filename.endswith('.csv'):
            data = pd.read_csv(file)
            # Ensure data matches expected structure
            required_columns = ['employee_name', 'job_title', 'department', 'salary', 'location']
            if all(col in data.columns for col in required_columns):
                # Insert data into the database
                for index, row in data.iterrows():
                    compensation = Compensation(
                        employee_name=row['employee_name'],
                        job_title=row['job_title'],
                        department=row['department'],
                        salary=row['salary'],
                        location=row['location']
                    )
                    db.session.add(compensation)
                db.session.commit()
                flash('Compensation data uploaded successfully!', 'success')
                return redirect(url_for('view_compensation'))
            else:
                flash('CSV file is missing required columns.', 'danger')
        else:
            flash('Invalid file type. Please upload a CSV file.', 'danger')
    return render_template('upload.html')

# View and Analyze Compensation Data
@app.route('/view_compensation')
@login_required
def view_compensation():
    compensation_data = Compensation.query.all()
    df = pd.read_sql_query('SELECT * FROM compensation', db.session.bind)
    
    # Compensation equity analysis
    department_salary_avg = df.groupby('department')['salary'].mean()
    salary_gaps = df.groupby('job_title')['salary'].mean()
    
    # Generate a bar plot for salary gaps across job titles
    fig, ax = plt.subplots(figsize=(8, 6))
    salary_gaps.plot(kind='bar', ax=ax, color='skyblue')
    ax.set_title('Average Salary by Job Title')
    ax.set_xlabel('Job Title')
    ax.set_ylabel('Average Salary')
    plt.xticks(rotation=45, ha='right')

    # Convert plot to base64 to render in the web page
    img = io.BytesIO()
    plt.savefig(img, format='png')
    img.seek(0)
    plot_url = base64.b64encode(img.getvalue()).decode('utf8')

    return render_template('view_compensation.html', compensation_data=compensation_data, plot_url=plot_url, department_salary_avg=department_salary_avg)

# Compensation Report (Downloadable)
@app.route('/download_report')
@login_required
def download_report():
    # Generate a CSV report of compensation data
    compensation_data = Compensation.query.all()
    df = pd.read_sql_query('SELECT * FROM compensation', db.session.bind)
    file_path = "compensation_report.csv"
    df.to_csv(file_path, index=False)
    return redirect(file_path)

# Run the app
if __name__ == '__main__':
    db.create_all()  # Create the database tables
    app.run(debug=True)
