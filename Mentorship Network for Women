from flask import Flask, render_template, request, redirect, url_for, jsonify
from flask_sqlalchemy import SQLAlchemy
import datetime

# Initialize Flask app and SQLite database
app = Flask(__name__)
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///mentorship_network.db'
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
db = SQLAlchemy(app)

# User model (for Mentees and Mentors)
class User(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(100), unique=True, nullable=False)
    email = db.Column(db.String(100), unique=True, nullable=False)
    role = db.Column(db.String(50), nullable=False)  # 'mentee' or 'mentor'
    
    def __repr__(self):
        return f"User({self.username}, {self.role})"

# Mentor model (detailed mentor profile)
class Mentor(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    user_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)
    field = db.Column(db.String(100), nullable=False)
    bio = db.Column(db.Text, nullable=False)
    experience = db.Column(db.String(100), nullable=False)
    linkedin = db.Column(db.String(200), nullable=True)
    
    user = db.relationship('User', backref=db.backref('mentor', uselist=False))

    def __repr__(self):
        return f"Mentor({self.field}, {self.experience})"

# Mentorship Request model
class MentorshipRequest(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    mentee_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)
    mentor_id = db.Column(db.Integer, db.ForeignKey('mentor.id'), nullable=False)
    status = db.Column(db.String(50), default='Pending')  # 'Pending', 'Accepted', 'Rejected'
    
    mentee = db.relationship('User', backref=db.backref('mentorship_requests'))
    mentor = db.relationship('Mentor', backref=db.backref('mentorship_requests'))

@app.route('/')
def index():
    # Show list of mentors in various fields
    mentors = Mentor.query.all()
    return render_template('index.html', mentors=mentors)

@app.route('/register', methods=['GET', 'POST'])
def register():
    if request.method == 'POST':
        username = request.form['username']
        email = request.form['email']
        role = request.form['role']
        
        # Check if the username or email already exists
        existing_user = User.query.filter_by(username=username).first() or User.query.filter_by(email=email).first()
        if existing_user:
            return "User with this email or username already exists!"
        
        new_user = User(username=username, email=email, role=role)
        db.session.add(new_user)
        db.session.commit()

        if role == 'mentor':
            return redirect(url_for('mentor_profile', user_id=new_user.id))
        return redirect(url_for('index'))
    return render_template('register.html')

@app.route('/mentor_profile/<int:user_id>', methods=['GET', 'POST'])
def mentor_profile(user_id):
    user = User.query.get_or_404(user_id)
    if request.method == 'POST':
        field = request.form['field']
        bio = request.form['bio']
        experience = request.form['experience']
        linkedin = request.form.get('linkedin')

        new_mentor = Mentor(user_id=user.id, field=field, bio=bio, experience=experience, linkedin=linkedin)
        db.session.add(new_mentor)
        db.session.commit()
        return redirect(url_for('index'))

    return render_template('mentor_profile.html', user=user)

@app.route('/mentor_detail/<int:mentor_id>')
def mentor_detail(mentor_id):
    mentor = Mentor.query.get_or_404(mentor_id)
    return render_template('mentor_detail.html', mentor=mentor)

@app.route('/request_mentorship/<int:mentor_id>', methods=['POST'])
def request_mentorship(mentor_id):
    mentee_id = request.form['mentee_id']
    mentorship_request = MentorshipRequest(mentee_id=mentee_id, mentor_id=mentor_id)
    db.session.add(mentorship_request)
    db.session.commit()
    return redirect(url_for('index'))

@app.route('/requests')
def view_requests():
    requests = MentorshipRequest.query.all()
    return render_template('requests.html', requests=requests)

@app.route('/accept_request/<int:request_id>')
def accept_request(request_id):
    request = MentorshipRequest.query.get_or_404(request_id)
    request.status = 'Accepted'
    db.session.commit()
    return redirect(url_for('view_requests'))

@app.route('/reject_request/<int:request_id>')
def reject_request(request_id):
    request = MentorshipRequest.query.get_or_404(request_id)
    request.status = 'Rejected'
    db.session.commit()
    return redirect(url_for('view_requests'))

# Initialize the database
@app.before_first_request
def create_tables():
    db.create_all()

if __name__ == '__main__':
    app.run(debug=True)
