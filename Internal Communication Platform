# Import required libraries
from flask import Flask, render_template, request, redirect, url_for, flash, session
from flask_sqlalchemy import SQLAlchemy
from flask_login import LoginManager, UserMixin, login_user, login_required, logout_user, current_user
from werkzeug.security import generate_password_hash, check_password_hash
from datetime import datetime

# Initialize Flask app and database
app = Flask(__name__)
app.config['SECRET_KEY'] = 'your_secret_key'
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///app.db'
db = SQLAlchemy(app)

# Initialize login manager
login_manager = LoginManager()
login_manager.init_app(app)

# Models for User, Message, and Channel
class User(UserMixin, db.Model):
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(100), unique=True, nullable=False)
    email = db.Column(db.String(100), unique=True, nullable=False)
    password = db.Column(db.String(100), nullable=False)
    messages = db.relationship('Message', backref='author', lazy=True)

class Channel(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(100), unique=True, nullable=False)
    messages = db.relationship('Message', backref='channel', lazy=True)

class Message(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    content = db.Column(db.Text, nullable=False)
    timestamp = db.Column(db.DateTime, default=datetime.utcnow)
    user_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)
    channel_id = db.Column(db.Integer, db.ForeignKey('channel.id'), nullable=False)

# User loader for login_manager
@login_manager.user_loader
def load_user(user_id):
    return User.query.get(int(user_id))

# Routes for the platform

# Home route (landing page for logged-in users)
@app.route('/')
@login_required
def home():
    channels = Channel.query.all()
    return render_template('home.html', channels=channels)

# Register route
@app.route('/register', methods=['GET', 'POST'])
def register():
    if request.method == 'POST':
        username = request.form['username']
        email = request.form['email']
        password = request.form['password']
        hashed_password = generate_password_hash(password, method='sha256')
        new_user = User(username=username, email=email, password=hashed_password)
        db.session.add(new_user)
        db.session.commit()
        flash('Account created successfully!', 'success')
        return redirect(url_for('login'))
    return render_template('register.html')

# Login route
@app.route('/login', methods=['GET', 'POST'])
def login():
    if request.method == 'POST':
        email = request.form['email']
        password = request.form['password']
        user = User.query.filter_by(email=email).first()
        if user and check_password_hash(user.password, password):
            login_user(user)
            return redirect(url_for('home'))
        flash('Login Unsuccessful. Please check email and password', 'danger')
    return render_template('login.html')

# Logout route
@app.route('/logout')
@login_required
def logout():
    logout_user()
    return redirect(url_for('login'))

# Channel creation route (admin only)
@app.route('/create_channel', methods=['GET', 'POST'])
@login_required
def create_channel():
    if request.method == 'POST':
        channel_name = request.form['name']
        new_channel = Channel(name=channel_name)
        db.session.add(new_channel)
        db.session.commit()
        flash('New channel created!', 'success')
        return redirect(url_for('home'))
    return render_template('create_channel.html')

# Channel messaging route
@app.route('/channel/<int:channel_id>', methods=['GET', 'POST'])
@login_required
def channel(channel_id):
    channel = Channel.query.get_or_404(channel_id)
    if request.method == 'POST':
        message_content = request.form['message']
        new_message = Message(content=message_content, author=current_user, channel=channel)
        db.session.add(new_message)
        db.session.commit()
        flash('Message sent!', 'success')
        return redirect(url_for('channel', channel_id=channel.id))
    messages = Message.query.filter_by(channel_id=channel.id).all()
    return render_template('channel.html', channel=channel, messages=messages)

# Admin dashboard route (for viewing users and channels)
@app.route('/admin')
@login_required
def admin():
    if current_user.username != 'admin':  # Ensure that only admin can access
        flash('You do not have permission to view this page.', 'danger')
        return redirect(url_for('home'))
    users = User.query.all()
    channels = Channel.query.all()
    return render_template('admin.html', users=users, channels=channels)

# Notification handling (mock example)
@app.route('/notifications')
@login_required
def notifications():
    return render_template('notifications.html', messages=current_user.messages)

# Run the app
if __name__ == '__main__':
    db.create_all()  # Create database tables
    app.run(debug=True)
