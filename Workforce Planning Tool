# Import required libraries
import pandas as pd
from flask import Flask, render_template, request, redirect, url_for, flash
from flask_sqlalchemy import SQLAlchemy
from flask_login import LoginManager, UserMixin, login_user, login_required, logout_user, current_user
from werkzeug.security import generate_password_hash, check_password_hash
import matplotlib.pyplot as plt
import io
import base64

# Initialize Flask app and database
app = Flask(__name__)
app.config['SECRET_KEY'] = 'your_secret_key'
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///workforce_planning.db'
db = SQLAlchemy(app)

# Initialize login manager
login_manager = LoginManager()
login_manager.init_app(app)

# Models for User and Workforce Data
class User(UserMixin, db.Model):
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(100), unique=True, nullable=False)
    email = db.Column(db.String(100), unique=True, nullable=False)
    password = db.Column(db.String(100), nullable=False)

class Employee(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(100), nullable=False)
    job_title = db.Column(db.String(100), nullable=False)
    department = db.Column(db.String(100), nullable=False)
    skills = db.Column(db.String(200), nullable=False)
    experience = db.Column(db.Integer, nullable=False)  # years of experience
    location = db.Column(db.String(100), nullable=False)

class Goal(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    description = db.Column(db.String(200), nullable=False)
    target_hires = db.Column(db.Integer, nullable=False)
    target_skillset = db.Column(db.String(200), nullable=True)  # Desired skillset
    target_experience = db.Column(db.Integer, nullable=True)  # Target experience in years

# User loader for login_manager
@login_manager.user_loader
def load_user(user_id):
    return User.query.get(int(user_id))

# Routes for the platform

# Home route
@app.route('/')
@login_required
def home():
    goals = Goal.query.all()
    return render_template('index.html', goals=goals)

# Register route
@app.route('/register', methods=['GET', 'POST'])
def register():
    if request.method == 'POST':
        username = request.form['username']
        email = request.form['email']
        password = request.form['password']
        hashed_password = generate_password_hash(password, method='sha256')
        new_user = User(username=username, email=email, password=hashed_password)
        db.session.add(new_user)
        db.session.commit()
        flash('Account created successfully!', 'success')
        return redirect(url_for('login'))
    return render_template('register.html')

# Login route
@app.route('/login', methods=['GET', 'POST'])
def login():
    if request.method == 'POST':
        email = request.form['email']
        password = request.form['password']
        user = User.query.filter_by(email=email).first()
        if user and check_password_hash(user.password, password):
            login_user(user)
            return redirect(url_for('home'))
        flash('Login Unsuccessful. Please check email and password', 'danger')
    return render_template('login.html')

# Logout route
@app.route('/logout')
@login_required
def logout():
    logout_user()
    return redirect(url_for('login'))

# Upload Employee Data Route
@app.route('/upload', methods=['GET', 'POST'])
@login_required
def upload_employee_data():
    if request.method == 'POST':
        file = request.files['file']
        if file and file.filename.endswith('.csv'):
            data = pd.read_csv(file)
            # Ensure the correct columns are present
            required_columns = ['name', 'job_title', 'department', 'skills', 'experience', 'location']
            if all(col in data.columns for col in required_columns):
                # Insert data into the database
                for index, row in data.iterrows():
                    employee = Employee(
                        name=row['name'],
                        job_title=row['job_title'],
                        department=row['department'],
                        skills=row['skills'],
                        experience=row['experience'],
                        location=row['location']
                    )
                    db.session.add(employee)
                db.session.commit()
                flash('Employee data uploaded successfully!', 'success')
                return redirect(url_for('view_employee_data'))
            else:
                flash('CSV file is missing required columns.', 'danger')
        else:
            flash('Invalid file type. Please upload a CSV file.', 'danger')
    return render_template('upload.html')

# View Employee Data Route
@app.route('/view_employee_data')
@login_required
def view_employee_data():
    employee_data = Employee.query.all()
    return render_template('view_employee_data.html', employee_data=employee_data)

# Set Organizational Goals Route
@app.route('/set_goals', methods=['GET', 'POST'])
@login_required
def set_goals():
    if request.method == 'POST':
        description = request.form['description']
        target_hires = int(request.form['target_hires'])
        target_skillset = request.form.get('target_skillset', '')
        target_experience = int(request.form['target_experience'])
        new_goal = Goal(description=description, target_hires=target_hires, 
                        target_skillset=target_skillset, target_experience=target_experience)
        db.session.add(new_goal)
        db.session.commit()
        flash('Organizational goal set successfully!', 'success')
        return redirect(url_for('home'))
    return render_template('set_goals.html')

# Workforce Gap Analysis Route
@app.route('/analyze', methods=['GET'])
@login_required
def analyze_gap():
    employees = Employee.query.all()
    goals = Goal.query.all()

    # Analyze gaps for each goal
    gap_analysis = []
    for goal in goals:
        target_hires = goal.target_hires
        target_skillset = goal.target_skillset
        target_experience = goal.target_experience

        # Filter employees based on goal requirements
        eligible_employees = [emp for emp in employees if 
                              (target_skillset.lower() in emp.skills.lower() if target_skillset else True) and
                              (emp.experience >= target_experience)]
        gap_analysis.append({
            'goal_description': goal.description,
            'current_staff_count': len(eligible_employees),
            'staff_gap': max(0, target_hires - len(eligible_employees))
        })

    # Generate visualization of the gap analysis
    gap_df = pd.DataFrame(gap_analysis)
    fig, ax = plt.subplots(figsize=(8, 6))
    gap_df.plot(kind='bar', x='goal_description', y='staff_gap', ax=ax, color='skyblue')
    ax.set_title('Staffing Gap Analysis')
    ax.set_xlabel('Goal Description')
    ax.set_ylabel('Staff Gap')

    # Convert plot to base64 to render in the web page
    img = io.BytesIO()
    plt.savefig(img, format='png')
    img.seek(0)
    plot_url = base64.b64encode(img.getvalue()).decode('utf8')

    return render_template('gap_analysis.html', gap_analysis=gap_analysis, plot_url=plot_url)

# Run the app
if __name__ == '__main__':
    db.create_all()  # Create the database tables
    app.run(debug=True)
